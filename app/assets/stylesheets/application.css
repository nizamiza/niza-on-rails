@import "reset.css" layer(reset);
@import "base.css" layer(base);

.giga-emoji {
  font-size: 5rem;
}

p {
  max-width: 69ch;
}

button {
  display: inline-flex;
  gap: 0.75ch;
  justify-content: center;
  background-color: hsl(var(--theme-accent));
  color: var(--bg-color);
  border: 0;
  padding: 0.5em 1.5em;
  border-radius: var(--br-lg);
  font-weight: 500;
  cursor: pointer;

  &:focus-visible {
    color: var(--bg-color);
    background-color: var(--fg-color);
    outline-color: var(--fg-color);
  }
}

:is(ul, ol, dt) {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  margin: 0;
  padding-inline-start: 2.5rem;
}

body {
  display: grid;
  gap: 3rem 0rem;
  align-content: start;
  justify-content: center;
  grid-template-columns:
    [full-start] minmax(1rem, 1fr) [main-start] minmax(0, var(--content-width))
    [main-end] minmax(1rem, 1fr) [full-end];

  & > main {
    display: grid;
    gap: inherit;
    grid-template-columns: subgrid;
  }

  & > * {
    grid-column: main-start / main-end;
  }

  & > .full {
    grid-column: full-start / full-end;
  }

  & > .page-header {
    display: grid;
    grid-template-columns: subgrid;
    grid-column: full-start / full-end;
  }
}

.page-header {
  display: grid;
  grid-column: full-start / full-end;
  grid-template-columns: subgrid;
  justify-items: flex-start;
  gap: 1rem;
  max-width: 100%;
  padding-top: 20vh;
  padding-bottom: 2rem;
  position: relative;

  & > * {
    grid-column: main-start / main-end;
  }
}

.page-footer {
  display: grid;
  place-content: center;
  text-align: center;
  padding: 1.5rem;
  font-size: 0.875rem;
  opacity: 0.75;
  margin-top: max(auto, 4rem);
}

.nav-panel {
  --backdrop-filter: blur(2rem);
  --bg-color: 30 30 30;
  --fg-color: white;
  --fg-color-inverse: black;
  --bg-opacity: 0.72;
  --bg: rgb(var(--bg-color) / var(--bg-opacity));
  --py: 1em;
  --px: calc(var(--py) * 1.5);
  --gap: 1.25em;
  --font-size: 0.875rem;

  position: sticky;
  bottom: 1.5rem;
  justify-self: center;
  max-width: 100%;
  z-index: 100;
  display: flex;
  justify-content: center;
  color: var(--fg-color);
  font-size: var(--font-size);
  padding: var(--py) var(--px);
  gap: var(--gap);
  border-radius: var(--br-full);
  background-color: var(--bg);
  backdrop-filter: var(--backdrop-filter);
  -webkit-backdrop-filter: var(--backdrop-filter);

  & > :is(ul, .locale-change-button) {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  & > ul {
    list-style: none;
    margin: 0;
    padding: 0;
    flex-wrap: nowrap;
    justify-content: flex-start;
    white-space: nowrap;
    overflow-x: auto;
    gap: calc(var(--gap) / 2) var(--gap);

    & a {
      color: inherit;
      text-decoration: none;
      line-height: 1.5;
    }
  }

  &::after {
    content: "";
    position: sticky;
    right: 0;
    height: 100%;
    width: 2px;
    color: transparent;
    border-radius: var(--br-full);
    background-color: color-mix(
      in srgb,
      var(--fg-color),
      var(--fg-color-inverse) 30%
    );
  }

  @media (prefers-color-scheme: dark) {
    --bg-color: 220 220 220;
    --fg-color: black;
    --fg-color-inverse: white;

    font-weight: 500;
  }

  @media (min-width: 768px) {
    --font-size: 1rem;
    --px: calc(var(--py) * 2);
  }

  @media print {
    display: none;
  }
}

.locale-change-button {
  background-color: transparent;
  padding: 0.125rem;
  order: 99;
}

.locale-change-dialog[open] {
  position: absolute;
  display: flex;
  bottom: calc(100% + 0.75rem);
  left: 100%;
  translate: -100%;
  padding: 0.75rem 1.5rem;
  border: 0;
  border-radius: var(--br-lg);
  background-color: rgb(92 92 92);
  color: var(--fg-color);

  & > ul {
    list-style: none;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding: 0;

    & a {
      color: inherit;
      text-decoration: none;
      width: 100%;
    }
  }

  @media (prefers-color-scheme: dark) {
    background-color: rgb(163 163 163);
  }
}

.status-message-list {
  --offset: 1rem;

  display: grid;
  gap: 1rem;
  justify-content: end;
  position: fixed;
  inset: var(--offset) var(--offset) auto var(--offset);
  list-style: none;
  padding: 0;
  margin: 0;
  z-index: 100;
}

.status-message[open] {
  --accent-color: var(--theme-info);

  all: unset;
  background-color: hsl(var(--accent-color) / 0.85);
  padding: 0.75rem;
  border-radius: var(--br-lg);
  display: grid;
  grid-template-columns: 1fr auto;
  align-items: start;
  backdrop-filter: blur(1rem);
  max-width: 40ch;
  line-height: 2;

  & > form > button {
    margin: 0;
    background-color: transparent;
    color: inherit;
    padding: 0.25em;
  }

  &[data-type="alert"] {
    --accent-color: var(--theme-error);
  }

  &[data-type="warning"] {
    --accent-color: var(--theme-warning);
  }

  &[data-type="success"] {
    --accent-color: var(--theme-success);
  }
}

.noise {
  --base-color: hsl(var(--theme-accent));
  --end-color: color-mix(in srgb, var(--base-color), var(--bg-color) 70%);

  &::before {
    --color-space-or-direction: to bottom;

    content: "";
    position: absolute;
    inset: 0;
    z-index: -1;
    background-image: linear-gradient(
      var(--color-space-or-direction),
      var(--base-color),
      color-mix(in oklab, var(--end-color), transparent 60%)
    );
  }

  &::after {
    content: "";
    position: absolute;
    inset: 0;
    z-index: -2;
    background-image: url("noise.svg");
    background-repeat: repeat;
    background-size: 28rem;
  }
}

@supports (background-image: linear-gradient(in oklab, red, blue)) {
  .noise::before {
    --color-space-or-direction: in oklab;
  }
}

.icon {
  display: inline-flex;
  width: 1.5em;
  height: 1.5em;
}

[class^="icon-"][aria-hidden="true"] {
  display: none;
}

.order-first {
  order: -1;
}

.sr-only {
  position: absolute;
  left: -10000px;
  top: auto;
  width: 1px;
  height: 1px;
  overflow: hidden;
}

.section {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  align-items: flex-start;

  &.stretch {
    align-items: stretch;
  }
}

form {
  display: grid;
  gap: 0.825rem;
  width: 100%;

  & > :is(p, textarea, .form-field:has(textarea)) {
    grid-column: 1 / -1;
  }

  & > [type="submit"] {
    grid-column: 1 / -1;
    justify-self: start;
    margin-top: 1rem;
  }

  @media (min-width: 768px) {
    grid-template-columns: 1fr 1fr;
  }
}
